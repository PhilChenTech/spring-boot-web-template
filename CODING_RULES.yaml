coding_rules:
  title: "Nice NPC Spring Boot DDD Template - Coding Standards"
  description: "Defines coding standards and best practices for the project to ensure code consistency, readability, and maintainability"

  architecture_principles:
    layered_architecture:
      structure:
        domain: "Domain layer - Pure business logic"
        application: "Application layer - CQRS implementation"
        infrastructure: "Infrastructure layer - Application startup, configuration and external dependency implementations"
        adapter_inbound: "Inbound adapters - REST controllers"
        adapter_outbound: "Outbound adapters - Database access"
        common: "Common utilities and configurations"

    dependency_rules:
      domain_layer: "Does not depend on any other layers, keeps pure"
      application_layer: "Only depends on Domain Layer"
      infrastructure_layer: "Can depend on Domain and Application layers, responsible for application startup"
      adapter_layers: "Can depend on all inner layers"

    clean_architecture_principles:
      - "Inner layers do not depend on outer layers"
      - "Business logic decoupled from frameworks"
      - "Interface segregation and dependency inversion"
      - "Single responsibility principle"

  package_structure:
    base_package: "com.nicenpc"
    layers:
      domain:
        description: "Domain layer"
        packages:
          - "entity"     # Domain entities
          - "exception"  # Domain exceptions
          - "repository" # Repository interfaces
      application:
        description: "Application layer"
        packages:
          - "command"    # CQRS commands
          - "query"      # CQRS queries
          - "handler"    # Command/query handlers
          - "bus"        # Command/query bus
      infrastructure:
        description: "Infrastructure layer"
        packages:
          - "config"     # Spring configurations
          - "metrics"    # Monitoring metrics
      adapter:
        description: "Adapter layer"
        inbound:
          - "controller" # REST controllers
          - "dto"        # Data transfer objects
          - "mapper"     # DTO mappers
          - "exception"  # Global exception handling
        outbound:
          - "entity"     # JPA entities
          - "repository" # Repository implementations
          - "mapper"     # Entity mappers
      common:
        description: "Common modules"
        packages:
          - "mapper"     # MapStruct configurations

  java_code_standards:
    naming_conventions:
      classes:
        format: "PascalCase"
        examples:
          correct:
            - "UserService"
            - "CreateUserCommand"
            - "UserController"
          incorrect:
            - "userService"
            - "user_controller"
      methods:
        format: "camelCase"
        rules: "Start with verb"
        examples:
          correct:
            - "createUser"
            - "getAllUsers"
            - "existsByEmail"
          incorrect:
            - "CreateUser"
            - "get_all_users"
      variables:
        format: "camelCase"
        rules: "Use meaningful names"
        examples:
          correct:
            - "userRepository"
            - "emailAddress"
            - "isActive"
          incorrect:
            - "ur"
            - "e"
            - "flag"
      constants:
        format: "UPPER_SNAKE_CASE"
        examples:
          - "DEFAULT_EMAIL_DOMAIN"
          - "MAX_RETRY_ATTEMPTS"
          - "EMAIL_PATTERN"

    java_record_usage:
      applicable_scenarios:
        - name: "DTO/VO classes"
          description: "Data transfer objects"
          use_case: "Immutable data carriers"
        - name: "Value objects"
          description: "Domain layer usage"
          use_case: "Immutable objects with business logic"
        - name: "Configuration classes"
          description: "Application configuration"
          use_case: "Configuration parameter encapsulation"
        - name: "API response wrappers"
          description: "Unified API response format"
          use_case: "Response data wrapping"
        - name: "Query result projections"
          description: "Database query results"
          use_case: "Query specific fields"
        - name: "Event objects"
          description: "Domain events"
          use_case: "Event-driven architecture"
        - name: "Command objects"
          description: "CQRS Commands"
          use_case: "Command pattern implementation"

      not_applicable_scenarios:
        - name: "JPA entity classes"
          reason: "Require mutability and JPA annotation support"
        - name: "Complex business logic domain entities"
          reason: "Contain complex state changes and business rules"
        - name: "Classes requiring inheritance"
          reason: "Records do not support inheritance"
        - name: "Service classes with mutable state"
          reason: "Service classes typically contain mutable state and dependencies"

      best_practices:
        - name: "Use compact constructor for validation"
          description: "Perform parameter validation in compact constructor"
        - name: "Add useful factory methods"
          description: "Provide static factory methods for convenient object creation"
        - name: "Implement useful methods"
          description: "Add business-related calculation methods"
        - name: "Combine with Bean Validation"
          description: "Use validation annotations to ensure data correctness"

    code_formatting:
      indentation: "4 spaces"
      method_length_limit: 50
      class_length_limit: 500
      member_order:
        - "Static constants"
        - "Instance variables"
        - "Constructors"
        - "Public methods"
        - "Private methods"

  lombok_usage:
    layer_guidelines:
      domain_layer:
        policy: "Minimize usage"
        description: "Keep pure"
        allowed_annotations:
          - "@Data"
          - "@NoArgsConstructor"
          - "@AllArgsConstructor"
        avoid_annotations:
          - "@Builder"
          - "@Wither"

      application_layer:
        policy: "Dependency injection priority"
        recommended_annotations:
          - "@RequiredArgsConstructor"
        description: "Mainly used for dependency injection"

      adapter_layers:
        policy: "Full utilization"
        description: "Can use various Lombok features"
        recommended_annotations:
          - "@Data"
          - "@NoArgsConstructor"
          - "@AllArgsConstructor"
          - "@RequiredArgsConstructor"

      utility_classes:
        recommended_annotations:
          - "@UtilityClass"
        description: "Prevent instantiation"

  spring_annotations:
    dependency_injection:
      recommended_approach: "Constructor injection + @RequiredArgsConstructor"
      avoid: "Field injection (@Autowired on fields)"

    layer_annotations:
      domain_layer: "No Spring annotations"
      application_layer:
        - "@Service"
        - "@Component"
      infrastructure_layer:
        - "@Configuration"
      adapter_inbound:
        - "@RestController"
        - "@ControllerAdvice"
      adapter_outbound:
        - "@Repository"
        - "@Component"

  api_design:
    rest_api_paths:
      base_pattern: "/api/v{version}/{resource}"
      example: "/api/v1/users"
      methods:
        GET: "Query resources"
        POST: "Create resources"
        PUT: "Update entire resource"
        DELETE: "Delete resources"

    http_status_codes:
      success:
        200: "OK - Query successful"
        201: "Created - Creation successful"
        204: "No Content - Deletion successful"
      client_error:
        400: "Bad Request - Request parameter error"
        404: "Not Found - Resource not found"
        409: "Conflict - Resource conflict"
      server_error:
        500: "Internal Server Error - Server error"

    api_documentation:
      standard: "OpenAPI 3.0"
      required_annotations:
        - "@Tag"
        - "@Operation"
        - "@ApiResponses"
        - "@Parameter"

    dto_design:
      request_dto_rules:
        - "Use Bean Validation annotations"
        - "Include necessary validation rules"
        - "Provide clear error messages"
      response_dto_rules:
        - "Use Instant instead of LocalDateTime"
        - "Unified response format"
      unified_response_format:
        fields:
          - "success: boolean"
          - "message: String"
          - "data: T"
          - "timestamp: Instant"

  exception_handling:
    domain_exceptions:
      base_class: "DomainException extends RuntimeException"
      naming_pattern: "{Entity}{Condition}Exception"
      examples:
        - "UserNotFoundException"
        - "UserAlreadyExistsException"
      factory_methods: "Provide static factory methods"

    global_exception_handler:
      annotation: "@ControllerAdvice"
      responsibilities:
        - "Handle domain exceptions"
        - "Handle validation exceptions"
        - "Handle generic exceptions"
        - "Log appropriate messages"
      response_format: "Unified ApiResponse format"

  testing_standards:
    principles:
      - "Use only unit tests"
      - "No dependency on Spring framework or external resources"
      - "Fast execution (complete within seconds)"
      - "Isolation (use Mock to isolate dependencies)"
      - "Deterministic (test results should be reproducible and stable)"

    testing_layers:
      domain_layer:
        type: "Pure domain object tests"
        framework: "JUnit 5"
        dependencies: "No framework dependencies"
      application_layer:
        type: "Unit tests"
        framework: "JUnit 5 + Mockito"
        annotations:
          - "@ExtendWith(MockitoExtension.class)"
          - "@Mock"
          - "@InjectMocks"
      controller_layer:
        type: "Unit tests"
        framework: "JUnit 5 + Mockito"
        description: "Mock Service to test Controller"
      repository_implementation:
        type: "Unit tests"
        framework: "JUnit 5 + Mockito"
        description: "Mock JPA Repository to test repository implementation"

    naming_conventions:
      pattern: "should{ExpectedBehavior}_When{Condition}"
      annotation: "@DisplayName with Chinese description"
      examples:
        - "shouldCreateUser_WhenValidUserDataProvided"
        - "shouldThrowUserAlreadyExistsException_WhenEmailAlreadyExists"

    coverage_requirements:
      domain_layer: "95% or higher"
      application_layer: "90% or higher"
      adapter_layer: "85% or higher"
      overall_project: "90% or higher"

    best_practices:
      test_pattern: "Given-When-Then"
      test_data_creation: "Test data builder pattern"
      mock_usage: "Only mock external dependencies"
      exception_testing: "Use assertThrows to verify exceptions"
      boundary_testing: "Test boundary values and special cases"
      test_organization: "Use @Nested to organize test structure"

  documentation_standards:
    api_documentation:
      tool: "OpenAPI 3.0 (Swagger)"
      requirements:
        - "Complete API description"
        - "Request/response examples"
        - "Error code descriptions"
        - "Parameter validation rules"

    readme_requirements:
      per_module:
        - "Module purpose and responsibilities"
        - "Dependency relationship descriptions"
        - "Setup and usage instructions"
        - "Example code"
        - "Troubleshooting guides"

    code_comments:
      javadoc_requirements:
        - "Class purpose description"
        - "Method parameters and return values"
        - "Exception descriptions"
        - "Usage examples"
        - "Author and version information"

  database_design:
    table_naming:
      prefix: "TB_"
      format: "All uppercase"
      separator: "Underscore (_)"
      examples:
        correct:
          - "TB_USER"
          - "TB_USER_ROLE"
          - "TB_ORDER"
        incorrect:
          - "user"
          - "User"
          - "tb_user"

    column_naming:
      format: "All uppercase"
      separator: "Underscore (_)"
      descriptive: "Clearly express column purpose"
      patterns:
        primary_key: "{TABLE_NAME}_ID"
        foreign_key: "{REFERENCED_TABLE}_ID"
        status_fields: "{ENTITY}_STATUS"
        boolean_fields: "IS_{DESCRIPTION}"
        timestamp_fields:
          - "CREATED_AT"
          - "UPDATED_AT"
          - "DELETED_AT"
        count_fields: "{ENTITY}_COUNT"
        amount_fields: "{TYPE}_AMOUNT"

    data_types:
      postgresql_mapping:
        primary_key: "BIGSERIAL"
        foreign_key: "BIGINT"
        short_text: "VARCHAR(n)"
        long_text: "TEXT"
        boolean: "BOOLEAN"
        timestamp: "TIMESTAMPTZ"
        decimal: "DECIMAL(19,4)"
        json: "JSONB"

    time_handling:
      timezone_rule: "All timestamp fields must be stored in UTC+0 timezone"
      postgresql_type: "TIMESTAMPTZ (mandatory)"
      prohibited_types:
        - "TIMESTAMP"
        - "DATE"
        - "TIME"
        - "TIMESTAMP WITHOUT TIME ZONE"

    indexing:
      types:
        single_column: "Single column index"
        composite: "Composite index"
        unique: "Unique index"
        partial: "Partial index"
      naming_convention:
        index: "IDX_{TABLE}_{COLUMN}"
        unique: "UNQ_{TABLE}_{COLUMN}"

    constraints:
      foreign_key_naming: "FK_{CHILD_TABLE}_{PARENT_TABLE}"
      check_constraint_naming: "CHK_{TABLE}_{DESCRIPTION}"
      referential_actions:
        on_delete: "RESTRICT"
        on_update: "CASCADE"

    audit_fields:
      mandatory:
        - "CREATED_AT TIMESTAMPTZ DEFAULT (NOW() AT TIME ZONE 'UTC') NOT NULL"
        - "CREATED_BY BIGINT NOT NULL"
        - "UPDATED_AT TIMESTAMPTZ DEFAULT (NOW() AT TIME ZONE 'UTC') NOT NULL"
        - "UPDATED_BY BIGINT NOT NULL"
        - "VERSION INTEGER DEFAULT 0 NOT NULL"
      optional_soft_delete:
        - "IS_DELETED BOOLEAN DEFAULT FALSE NOT NULL"
        - "DELETED_AT TIMESTAMPTZ"
        - "DELETED_BY BIGINT"

    version_control:
      tool: "Flyway"
      naming_pattern: "V{version_number}__{description}.sql"
      examples:
        - "V1__Create_users_table.sql"
        - "V2__Add_user_email_index.sql"
        - "V3__Alter_user_add_phone_column.sql"
      script_structure:
        - "Table creation"
        - "Index creation"
        - "Constraint addition"
        - "Comment addition"
